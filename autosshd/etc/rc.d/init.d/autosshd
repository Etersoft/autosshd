#!/bin/sh
#
# autosshd      autossh system service
#
# chkconfig: 2345 30 60
#
# description: autosshd run autossh as system service
#
# processname: autossh
#

# Do not load RH compatibility interface.
WITHOUT_RC_COMPAT=1

# Source function library.
. /etc/init.d/functions

# Autosshd variables 
AUTOSSH_LOGLEVEL=4
AUTOSSH_POLL=120
AUTOSSH_GATETIME=0
AUTOSSH_DEBUG=yes.
#FIX call in cycle for all conf
init_autossh(){
    AUTOSSH_PIDFILE=${PIDFILEDIR}/$(basename $1 .conf).pid
    AUTOSSH_LOCKFILE=$LOCKFILEDIR/$(basename $1 .conf).lck
    AUTOSSH_LOGFILE=/var/lib/autosshd/$(basename $1 .conf).log
}

# Source networking configuration.
SourceIfNotEmpty /etc/sysconfig/network

# AutoSSHDaemon configuration
SYSCONFIGFILE="/etc/sysconfig/autosshd"
SourceIfNotEmpty $SYSCONFIGFILE


###========= Functions =========
#===== help message =====
help()
{
    echo "
Usage: ${0##*/} ACTION [CHANNEL]
ACTION  - requested action of all or given AutoSSH channel
CHANNEL - optional name of AutoSSH channel (with corresponding 
          CHANNEL.* files in $CONFIGDIR)

Usefull actions is:
start       - start all configured channels except listed 
              in MANUAL variable in $CONFIGDIR/CHANNEL.conf file
stop        - stop all running channels
restart     - restart channels that are configured for autostart 
reload      - restart only running channels
list        - print list of configured channels
status      - print status of running channels
help        - print this message.
"
    RETVAL=1
    return $RETVAL
}

get_channels_list()
{
    /bin/ls $CONFIGDIR/*.conf 2>/dev/null
}

list_channels()
{
    LIST=$(get_channels_list)
    echo "Configured channels:"
        for config in $LIST; do
	    SourceIfNotEmpty $config
	    echo "   `basename $config .conf`. Manual: ${MANUAL} "
        done
    return 0
}

running_channels()
{
    LIST=`/bin/ls $PIDFILEDIR/*.pid 2>/dev/null`
    CHANNELS=""
    for proc in $LIST; do
        CHANNELS="$CHANNELS`basename $proc .pid` "
    done
    return 0
}

do_run_one()
{
    if [ -f $1 ]; then
	SourceIfNotEmpty $1

	# skip if in manual mode
	is_no $MANUAL || return 0

        start_daemon --pidfile "$AUTOSSH_PIDFILE" --make-pidfile --lockfile "$AUTOSSH_LOCKFILE" --user $AUTOSSHUSER --name autossh  --displayname "autossh to ${HOST}" -- autossh ${AUTOSSH_OPTIONS}
        RETVAL=$?
        sleep 1

        # strange hack: overwrite pidfile??
        #ps ax | grep -v grep | grep ${AUTOSSH_PORT} | awk {'print $1'} > "$AUTOSSH_PIDFILE"
        return $RETVAL
    else
	echo "Configuration file $1 not found"
	RETVAL=1
        return $RETVAL
    fi
}

do_stop_one()
{
    if [ -f $1 ]; then
	SourceIfNotEmpty $1
	if [ -s $AUTOSSH_PIDFILE ]; then
	    #ParentPID=${PIDFILEDIR}/${HOST}.pid
	    #ps ax | grep -v grep | grep "parent of $(cat $AUTOSSH_PIDFILE)" | awk {'print $1'} > $ParentPID
	    stop_daemon --pidfile "$AUTOSSH_PIDFILE" --lockfile "$AUTOSSH_LOCKFILE" --expect-user $AUTOSSHUSER --name autossh --displayname "autossh to ${HOST}" -- autossh
	    RETVAL=$?
	    rm -f "$AUTOSSH_PIDFILE"
	    #rm -f "$ParentPID"
	    return $RETVAL
	else
	    msg_not_running "autossh for `basename $1 .conf`"
	    echo
	fi
    else
	echo "Configuration file $1 not found"
	RETVAL=1
        return $RETVAL
    fi
}


show_status()
{
        RETVAL=0
        [ -n "$CHANNELS" ] || running_channels

        if [ -z "$CHANNELS" ]; then
                msg_not_running autossh
                echo
                RETVAL=1
        else
                for CHANNEL in $CHANNELS; do
                    status --pidfile "$PIDFILEDIR/$CHANNEL.pid" --lockfile "$LOCKFILEDIR/$CHANNEL.lck" --expect-user $AUTOSSHUSER --name ssh --displayname "autossh to $CHANNEL" -- autossh
                    RETVAL=$(( $RETVAL + $? ))
                done
        fi
        return $RETVAL
}

start()
{
    # run only listed channels
    if [ -n "$CHANNELS" ] ; then
        for i in $CHANNELS; do
            init_autossh $i.conf
            do_run_one $CONFIGDIR/$i.conf
        done
        return 0
    fi

    # run all scheduled channels
    CHANNELS=$(get_channels_list)
    for config in $CHANNELS; do
        SourceIfNotEmpty $config
        init_autossh $config
        do_run_one $config
    done
    return 0
}

stop()
{
    [ -n "$CHANNELS" ] || running_channels

    for config in $CHANNELS; do
        SourceIfNotEmpty $config
        init_autossh $config
        do_stop_one $CONFIGDIR/$config.conf
    done
    return 0
}

init_autossh

###====== Main =====
RETVAL=0

OP=$1
shift
CHANNELS="$@"

is_yes "$NETWORKING" || return 0

# See how we were called.
case "$OP" in
        start)
            start
            ;;
        stop)
            stop
            ;;
        reload|condreload)
            stop
            sleep 2
            start
            ;;
        restart)
            stop
            sleep 2
            start
            ;;
        status)
            show_status
            ;;
        list)
            list_channels
            ;;
        help)
            help
            ;;
        *)
                msg_usage "${0##*/} {start|stop|reload|restart|status|list|help}"
                RETVAL=1
esac

exit $RETVAL
